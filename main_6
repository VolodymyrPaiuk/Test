# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LEPS_4_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QApplication, QMainWindow, QFrame, QHBoxLayout, QVBoxLayout, QComboBox, QLabel, QCheckBox, QWidget, QSizePolicy, QGraphicsDropShadowEffect
from PyQt5.QtGui import QColor, QPainter, QPen, QLinearGradient
from PyQt5.QtCore import Qt
import module.Choose_file
import module.read_record_csv
import module.Check_modular_V2
import module.Thread_to_Int
import module.Thread_to_Check_modular
import module.mydatabase
import module.Thread_to_record_db
import os

class ColorfulFrame(QFrame): # Клас для заливки кольором фреймів
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAutoFillBackground(False)
        self.gradient = QLinearGradient(0, 0, self.width(), 0)
        # self.setColors(QColor(0, 0, 0), QColor(255, 255, 255))

    def setColors(self, start_color, end_color):
        self.gradient.setColorAt(0, start_color)
        self.gradient.setColorAt(1, end_color)
        self.update()

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.fillRect(self.rect(), self.gradient)


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        # Створення головного вікна
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        # Створення головного макету
        main_layout = QHBoxLayout()
        main_widget.setLayout(main_layout)
        main_widget.setStyleSheet("QWidget { background-color: rgb(255, 255, 255); font-family: Times New Roman, sans-serif; font-size: 11pt; }")

        #Ініціалізація всіх змінних
        self.Read_harnesses = [] #Всі вязки
        self.uniq_har = [] #перелік вязок
        self.Read_Int = [] #Чистий Internal
        self.Readed_Int_and_number_of_virt = [] #Для функції Harnesses_to_Internal
        self.Read_Virt = [] #Чистий Virtual
        self.only_index_virt = [] #Всі індекси з Virtual
        self.Read_Basic_Module_L3 = []  # Чистий Basic_Module
        self.only_index_Basic_Module_L3 = []  # Всі індекси з Basic_Module
        self.For_Basic_Module_int_L3 = []  # Масив :Інтернал - кількість умов - група, для розбивки вязки
        self.Read_Basic_Module_L4 = []  # Чистий Basic_Module
        self.only_index_Basic_Module_L4 = []  # Всі індекси з Basic_Module
        self.For_Basic_Module_int_L4 = []  # Масив :Інтернал - кількість умов - група, для розбивки вязки
        self.Rezult = [] #Результат розбивки вязок
        self.Mistakes_harn = [] #Помилки які вичислив при загрузці Basic_Module і при розбивці вязок
        self.Wirelist = []
        self.wires_in_prod_mod = []
        self.Rezult_of_check = []

        self.setWindowTitle("LEPS_3-Basic+LEPS_4-Basic+LEPS_4-Virt_Int - Harnesses_to_Internal_and_check")
        self.setWindowModality(QtCore.Qt.ApplicationModal)
        self.resize(900, 500)

        self.radioButton = QtWidgets.QRadioButton(self)
        # self.radioButton.setGeometry(QtCore.QRect(10, 40, 150, 21))
        self.radioButton.setObjectName("radioButton")
        self.radioButton.setText("LEPS_3 Basic Module")
        self.radioButton_2 = QtWidgets.QRadioButton(self)
        # self.radioButton_2.setGeometry(QtCore.QRect(200, 40, 150, 21))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_2.setText("LEPS_4 Basic Module")
        self.radioButton_3 = QtWidgets.QRadioButton(self)
        # self.radioButton_3.setGeometry(QtCore.QRect(400, 40, 150, 21))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_3.setText("LEPS_4 Virtual and Internal")

        self.pushButton = QtWidgets.QPushButton(self)
        # self.pushButton.setGeometry(QtCore.QRect(10, 90, 201, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText("Download harnesses")
        self.pushButton.setFixedSize(250, 30)
        self.pushButton_2 = QtWidgets.QPushButton(self)
        # self.pushButton_2.setGeometry(QtCore.QRect(10, 130, 201, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setText("Download Virtual")
        self.pushButton_2.setFixedSize(250, 30)
        self.pushButton_3 = QtWidgets.QPushButton(self)
        # self.pushButton_3.setGeometry(QtCore.QRect(10, 170, 201, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setText("Download Internal")
        self.pushButton_3.setFixedSize(250, 30)
        self.pushButton_3_1 = QtWidgets.QPushButton(self)
        # self.pushButton_3_1.setGeometry(QtCore.QRect(10, 210, 201, 31))
        self.pushButton_3_1.setObjectName("pushButton_3_1")
        self.pushButton_3_1.setText("Download Basic Module")
        self.pushButton_3_1.setFixedSize(250, 30)
        self.pushButton_4 = QtWidgets.QPushButton(self)
        # self.pushButton_4.setGeometry(QtCore.QRect(10, 250, 271, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setText("Generate Internal for harnesses")
        self.pushButton_4.setFixedSize(250, 40)
        self.pushButton_5 = QtWidgets.QPushButton(self)
        # self.pushButton_5.setGeometry(QtCore.QRect(10, 290, 271, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.setText("SAVE Internal")
        self.pushButton_5.setFixedSize(300, 30)
        self.pushButton_6 = QtWidgets.QPushButton(self)
        # self.pushButton_6.setGeometry(QtCore.QRect(10, 330, 271, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.setText("SAVE Mistakes")
        self.pushButton_6.setFixedSize(300, 30)
        self.pushButton_7 = QtWidgets.QPushButton(self)
        # self.pushButton_7.setGeometry(QtCore.QRect(10, 370, 201, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.setText("Download Wirelist")
        self.pushButton_7.setFixedSize(250, 30)
        self.pushButton_8 = QtWidgets.QPushButton(self)
        # self.pushButton_8.setGeometry(QtCore.QRect(10, 410, 201, 31))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.setText("Download wires in prod_mod")
        self.pushButton_8.setFixedSize(250, 30)
        self.pushButton_9 = QtWidgets.QPushButton(self)
        # self.pushButton_9.setGeometry(QtCore.QRect(10, 450, 271, 31))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.setText("Generate a check")
        self.pushButton_9.setFixedSize(250, 40)
        self.pushButton_10 = QtWidgets.QPushButton(self)
        # self.pushButton_10.setGeometry(QtCore.QRect(10, 490, 271, 31))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.setText("SAVE result of check")
        self.pushButton_10.setFixedSize(300, 30)

        self.label_0 = QtWidgets.QLabel(self)
        # self.label_0.setGeometry(QtCore.QRect(10, 10, 521, 21))
        self.label_0.setObjectName("label_0")
        self.label_0.setText("Select which LEPS and type of masterdata you are using!")
        self.label = QtWidgets.QLabel(self)
        # self.label.setGeometry(QtCore.QRect(220, 90, 521, 21))
        self.label.setObjectName("label")
        self.label.setText("NOT")
        self.label_2 = QtWidgets.QLabel(self)
        # self.label_2.setGeometry(QtCore.QRect(220, 130, 521, 21))
        self.label_2.setObjectName("label_2")
        self.label_2.setText("NOT")
        self.label_3 = QtWidgets.QLabel(self)
        # self.label_3.setGeometry(QtCore.QRect(220, 170, 521, 21))
        self.label_3.setObjectName("label_3")
        self.label_3.setText("NOT")
        self.label_3_1 = QtWidgets.QLabel(self)
        # self.label_3_1.setGeometry(QtCore.QRect(220, 210, 521, 21))
        self.label_3_1.setObjectName("label_3_1")
        self.label_3_1.setText("NOT")
        self.label_4 = QtWidgets.QLabel(self)
        # self.label_4.setGeometry(QtCore.QRect(500, 250, 100, 21))
        self.label_4.setObjectName("label_4")
        self.label_4.setText("NOT")
        self.label_5 = QtWidgets.QLabel(self)
        # self.label_5.setGeometry(QtCore.QRect(220, 370, 200, 21))
        self.label_5.setObjectName("label_5")
        self.label_5.setText("NOT")
        self.label_6 = QtWidgets.QLabel(self)
        # self.label_6.setGeometry(QtCore.QRect(220, 410, 200, 21))
        self.label_6.setObjectName("label_6")
        self.label_6.setText("NOT")
        self.label_7 = QtWidgets.QLabel(self)
        # self.label_7.setGeometry(QtCore.QRect(500, 450, 100, 21))
        self.label_7.setObjectName("label_7")
        self.label_7.setText("NOT")

        self.progressBar = QtWidgets.QProgressBar(self)
        # self.progressBar.setGeometry(QtCore.QRect(290, 250, 200, 31))
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setValue(0)
        self.progressBar.setFixedSize(250, 30)

        self.progressBar_2 = QtWidgets.QProgressBar(self)
        # self.progressBar_2.setGeometry(QtCore.QRect(290, 450, 200, 31))
        self.progressBar_2.setObjectName("progressBar_2")
        self.progressBar_2.setValue(0)
        self.progressBar_2.setFixedSize(250, 30)

        # Процес бар для відображення статусу загрузки в db
        self.progressBar_3 = QtWidgets.QProgressBar(self)
        # self.progressBar_3.setGeometry(QtCore.QRect(590, 120, 227, 31))
        self.progressBar_3.setObjectName("progressBar_3")
        self.progressBar_3.setValue(0)

        # Додаю інтерфейс для роботи з базою даних ------------------------------------------------

        self.label_8 = QtWidgets.QLabel(self)
        # self.label_8.setGeometry(QtCore.QRect(600, 10, 200, 21))
        self.label_8.setObjectName("label_8")
        self.label_8.setText("Working with databases")
        self.label_8.setStyleSheet("font-size: 16px")

        self.check_box = QCheckBox(self)
        # self.check_box.setGeometry(QtCore.QRect(780, 12, 21, 21))
        self.check_box.setObjectName("check_box")

        self.combo_box = QComboBox(self)
        self.combo_box.addItems(
            ["Unload csv from ALL db", "Unload csv from Virtual db", "Unload csv from Internal db",
             "Unload csv from Basic_Module_L3 db", "Unload csv from Basic_Module_L4 db", "Unload csv from Wirelist db", "Unload csv from wires in prod_mod db"])
        self.combo_box.setStyleSheet("QComboBox { background-color: rgb(220, 220, 220) }")
        # self.combo_box.setGeometry(600, 40, 200, 30)

        self.combo_box_2 = QComboBox(self)
        self.combo_box_2.addItems(
            ["Clear ALL db", "Clear Virtual db", "Clear Internal db",
             "Clear Basic_Module_L3 db", "Clear Basic_Module_L4 db", "Clear Wirelist db", "Clear wires in prod_mod db"])
        self.combo_box_2.setStyleSheet("QComboBox { background-color: rgb(220, 220, 220) }")
        # self.combo_box_2.setGeometry(600, 75, 200, 30)

        # Створення головних боксів леяоту-----------------------------------------------------------
        # Лівий бокс
        box_left_frame = ColorfulFrame()
        box_left_layout = QVBoxLayout(box_left_frame)
        main_layout.addWidget(box_left_frame)
        box_left_layout.setContentsMargins(0, 0, 0, 0)
        box_left_layout.setSpacing(5)
        box_left_frame.setColors(QColor(255, 255, 255), QColor(255, 255, 255))
        # box_left_frame.setFixedSize(600, 700)

        box_left_frame_name = ColorfulFrame() # ряд з назвою і чек боксами
        box_left_layout_name = QVBoxLayout(box_left_frame_name)
        box_left_layout.addWidget(box_left_frame_name)
        box_left_frame_name.setColors(QColor(128, 163, 162), QColor(255, 255, 255))
        box_left_layout_name.addWidget(self.label_0)
        self.label_0.setStyleSheet("QLabel { background-color: transparent; font-size: 14pt; }")
        box_left_frame_name_b = ColorfulFrame()  # створюю додатковий леяот для чек кнопок
        box_left_layout_name_b = QHBoxLayout(box_left_frame_name_b)
        box_left_layout_name.addWidget(box_left_frame_name_b)
        box_left_frame_name_b.setColors(QColor(128, 163, 162), QColor(255, 255, 255))
        box_left_layout_name_b.addWidget(self.radioButton)
        self.radioButton.setStyleSheet("QRadioButton { background-color: transparent; }")
        box_left_layout_name_b.addWidget(self.radioButton_2)
        self.radioButton_2.setStyleSheet("QRadioButton { background-color: transparent; }")
        box_left_layout_name_b.addWidget(self.radioButton_3)
        self.radioButton_3.setStyleSheet("QRadioButton { background-color: transparent; }")

        box_left_frame_harn = ColorfulFrame()  # ряд з кнопкою для загрузки вязок
        box_left_layout_harn = QHBoxLayout(box_left_frame_harn)
        box_left_layout.addWidget(box_left_frame_harn)
        box_left_frame_harn.setColors(QColor(142, 195, 176), QColor(255, 255, 255))
        box_left_layout_harn.addWidget(self.pushButton)
        self.pushButton.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_harn.addWidget(self.label)
        self.label.setStyleSheet("QLabel { background-color: transparent; }")

        box_left_frame_mast = ColorfulFrame()  # ряд з кнопкою для загрузки мастердат
        box_left_layout_mast = QVBoxLayout(box_left_frame_mast)
        box_left_layout_mast.setContentsMargins(0, 0, 0, 0)
        box_left_layout.addWidget(box_left_frame_mast)
        box_left_frame_mast.setColors(QColor(158, 213, 197), QColor(255, 255, 255))
        box_left_frame_mast_V = ColorfulFrame()  # ряд з кнопкою для загрузки мастердат Vort
        box_left_layout_mast_V = QHBoxLayout(box_left_frame_mast_V)
        box_left_layout_mast.addWidget(box_left_frame_mast_V)
        box_left_frame_mast_V.setColors(QColor(158, 213, 197), QColor(255, 255, 255))
        box_left_layout_mast_V.addWidget(self.pushButton_2)
        self.pushButton_2.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_mast_V.addWidget(self.label_2)
        self.label_2.setStyleSheet("QLabel { background-color: transparent; }")
        box_left_frame_mast_I = ColorfulFrame()  # ряд з кнопкою для загрузки мастердат Internal
        box_left_layout_mast_I = QHBoxLayout(box_left_frame_mast_I)
        box_left_layout_mast.addWidget(box_left_frame_mast_I)
        box_left_frame_mast_I.setColors(QColor(158, 213, 197), QColor(255, 255, 255))
        box_left_layout_mast_I.addWidget(self.pushButton_3)
        self.pushButton_3.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_mast_I.addWidget(self.label_3)
        self.label_3.setStyleSheet("QLabel { background-color: transparent; }")
        box_left_frame_mast_B = ColorfulFrame()  # ряд з кнопкою для загрузки мастердат Basic
        box_left_layout_mast_B = QHBoxLayout(box_left_frame_mast_B)
        box_left_layout_mast.addWidget(box_left_frame_mast_B)
        box_left_frame_mast_B.setColors(QColor(158, 213, 197), QColor(255, 255, 255))
        box_left_layout_mast_B.addWidget(self.pushButton_3_1)
        self.pushButton_3_1.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_mast_B.addWidget(self.label_3_1)
        self.label_3_1.setStyleSheet("QLabel { background-color: transparent; }")

        box_left_frame_G_I = ColorfulFrame()  # ряд з кнопкою для генерації Internal
        box_left_layout_G_I = QHBoxLayout(box_left_frame_G_I)
        box_left_layout.addWidget(box_left_frame_G_I)
        box_left_frame_G_I.setColors(QColor(188, 234, 213), QColor(255, 255, 255))
        box_left_layout_G_I.addWidget(self.pushButton_4)
        self.pushButton_4.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_G_I.addWidget(self.progressBar)
        box_left_layout_G_I.addWidget(self.label_4)
        self.label_4.setStyleSheet("QLabel { background-color: transparent; }")

        box_left_frame_R_G_I = ColorfulFrame()  # ряд з кнопкою для збереження результату G_I
        box_left_layout_R_G_I = QVBoxLayout(box_left_frame_R_G_I)
        box_left_layout_R_G_I.setContentsMargins(0, 0, 0, 0)
        box_left_layout.addWidget(box_left_frame_R_G_I)
        box_left_frame_R_G_I.setColors(QColor(222, 245, 229), QColor(255, 255, 255))
        box_left_frame_R_G_I_save_Int = ColorfulFrame()  # ряд з кнопкою для збереження результату G_I save_Int
        box_left_layout_R_G_I_save_Int = QHBoxLayout(box_left_frame_R_G_I_save_Int)
        box_left_layout_R_G_I.addWidget(box_left_frame_R_G_I_save_Int)
        box_left_frame_R_G_I_save_Int.setColors(QColor(222, 245, 229), QColor(255, 255, 255))
        box_left_layout_R_G_I_save_Int.addWidget(self.pushButton_5)
        box_left_layout_R_G_I_save_Int.setAlignment(self.pushButton_5, Qt.AlignLeft)
        self.pushButton_5.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_frame_R_G_I_save_Mist = ColorfulFrame()  # ряд з кнопкою для збереження результату G_I save_Mist
        box_left_layout_R_G_I_save_Mist = QHBoxLayout(box_left_frame_R_G_I_save_Mist)
        box_left_layout_R_G_I.addWidget(box_left_frame_R_G_I_save_Mist)
        box_left_frame_R_G_I_save_Mist.setColors(QColor(222, 245, 229), QColor(255, 255, 255))
        box_left_layout_R_G_I_save_Mist.addWidget(self.pushButton_6)
        box_left_layout_R_G_I_save_Mist.setAlignment(self.pushButton_6, Qt.AlignLeft)
        self.pushButton_6.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")

        box_left_frame_W_PM = ColorfulFrame()  # ряд з кнопками для завантаження Wirelist і PM
        box_left_layout_W_PM = QVBoxLayout(box_left_frame_W_PM)
        box_left_layout_W_PM.setContentsMargins(0, 0, 0, 0)
        box_left_layout.addWidget(box_left_frame_W_PM)
        box_left_frame_W_PM.setColors(QColor(158, 213, 197), QColor(255, 255, 255))
        box_left_frame_W = ColorfulFrame()            # ряд з кнопкою для завантаження Wirelist
        box_left_layout_W = QHBoxLayout(box_left_frame_W)
        box_left_layout_W_PM.addWidget(box_left_frame_W)
        box_left_frame_W.setColors(QColor(158, 213, 197), QColor(255, 255, 255))
        box_left_layout_W.addWidget(self.pushButton_7)
        self.pushButton_7.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_W.addWidget(self.label_5)
        self.label_5.setStyleSheet("QLabel { background-color: transparent; }")
        box_left_frame_PM = ColorfulFrame()  # ряд з кнопкою для завантаження PM
        box_left_layout_PM = QHBoxLayout(box_left_frame_PM)
        box_left_layout_W_PM.addWidget(box_left_frame_PM)
        box_left_frame_PM.setColors(QColor(158, 213, 197), QColor(255, 255, 255))
        box_left_layout_PM.addWidget(self.pushButton_8)
        self.pushButton_8.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_PM.addWidget(self.label_6)
        self.label_6.setStyleSheet("QLabel { background-color: transparent; }")


        box_left_frame_check = ColorfulFrame()  # ряд з кнопкою для генерації check
        box_left_layout_check = QHBoxLayout(box_left_frame_check)
        box_left_layout.addWidget(box_left_frame_check)
        box_left_frame_check.setColors(QColor(188, 234, 213), QColor(255, 255, 255))
        box_left_layout_check.addWidget(self.pushButton_9)
        self.pushButton_9.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")
        box_left_layout_check.addWidget(self.progressBar_2)
        box_left_layout_check.addWidget(self.label_7)
        self.label_7.setStyleSheet("QLabel { background-color: transparent; }")

        box_left_frame_R_G_check = ColorfulFrame()  # ряд з кнопкою для збереження результату check
        box_left_layout_R_G_check = QVBoxLayout(box_left_frame_R_G_check)
        box_left_layout.addWidget(box_left_frame_R_G_check)
        box_left_frame_R_G_check.setColors(QColor(222, 245, 229), QColor(255, 255, 255))
        box_left_layout_R_G_check.addWidget(self.pushButton_10)
        self.pushButton_10.setStyleSheet("QPushButton { background-color: rgb(220, 220, 220) }")


        # Правий бокс
        box_right_frame = ColorfulFrame()
        box_right_layout = QVBoxLayout(box_right_frame)
        main_layout.addWidget(box_right_frame)
        box_right_frame.setFixedSize(250, 150)
        box_right_frame.setColors(QColor(255, 255, 255), QColor(255, 255, 255))
        box_right_layout.setContentsMargins(0, 0, 0, 0)
        box_right_layout.setSpacing(5)
        main_layout.setAlignment(box_right_frame, Qt.AlignTop) # розміщення боксу зверху
        # main_layout.setAlignment(box_left_frame, Qt.AlignTop)
        # box_right_frame.setColors(QColor(100, 100, 100), QColor(200, 200, 200))

        box_right_frame_up = ColorfulFrame()
        box_right_layout_up = QHBoxLayout(box_right_frame_up)
        box_right_layout.addWidget(box_right_frame_up)
        box_right_frame_up.setFixedSize(250, 50)
        box_right_frame_up.setColors(QColor(128, 163, 162), QColor(255, 255, 255))
        box_right_layout_up.addWidget(self.label_8)
        self.label_8.setStyleSheet("QLabel { background-color: transparent; }")
        box_right_layout_up.addWidget(self.check_box)
        self.check_box.setStyleSheet("QCheckBox { background-color: transparent; }")

        box_right_frame_under = ColorfulFrame()
        box_right_layout_under = QVBoxLayout(box_right_frame_under)
        box_right_layout.addWidget(box_right_frame_under)
        box_right_frame_under.setColors(QColor(171, 206, 207), QColor(255, 255, 255))
        box_right_layout_under.addWidget(self.combo_box)
        box_right_layout_under.addWidget(self.combo_box_2)
        box_right_layout_under.addWidget(self.progressBar_3)
        # Створення головних боксів леяоту-----------------------------------------------------------

        self.init_ui()
        self.init_db()

    def init_ui(self):
        self.pushButton.clicked.connect(self.clicer_pushButton)
        self.pushButton_2.clicked.connect(self.clicer_pushButton_2)
        self.pushButton_3.clicked.connect(self.clicer_pushButton_3)
        self.pushButton_3_1.clicked.connect(self.clicer_pushButton_3_1)
        self.pushButton_4.clicked.connect(self.clicer_pushButton_4)
        self.pushButton_5.clicked.connect(self.clicer_pushButton_5)
        self.pushButton_6.clicked.connect(self.clicer_pushButton_6)
        self.pushButton_7.clicked.connect(self.clicer_pushButton_7)
        self.pushButton_8.clicked.connect(self.clicer_pushButton_8)
        self.pushButton_9.clicked.connect(self.clicer_pushButton_9)
        self.pushButton_10.clicked.connect(self.clicer_pushButton_10)
        self.combo_box.activated.connect(self.clicer_combo_box)
        self.combo_box_2.activated.connect(self.clicer_combo_box_2)
        self.check_box.clicked.connect(self.clicer_check_box)
        self.radioButton.clicked.connect(self.clicer_radioButton)
        self.radioButton_2.clicked.connect(self.clicer_radioButton)
        self.radioButton_3.clicked.connect(self.clicer_radioButton)

    def init_db(self): # перевірка чи створена база даних, якщо ні то створюю, якщо створена то нічого не роблю
        if os.path.exists(os.path.join(os.getcwd(), 'my_database.db')):
            pass
        else:
            # db_harnesses = "db_harnesses"
            # columns_harn = ["Customer_JIT_Call_Number TEXT", "Customer_material TEXT", "Comp_Group_Material TEXT", "JIT_call_quantity TEXT", "Material TEXT"]
            # creator_db_harn = module.mydatabase.Database()
            # creator_db_harn.create_table_db(db_harnesses, columns_harn)

            db_virtual = "db_virtual"
            columns_vortual = ["VirtualModuleNumber TEXT", "ModuleNumber TEXT", "OrderType TEXT"]
            creator_db_virtual = module.mydatabase.Database()
            creator_db_virtual.create_table_db(db_virtual, columns_vortual)

            db_internal = "db_internal"
            columns_internal = ["InternalModuleNumber TEXT", "InternalModuleGroup TEXT", "ModuleNumber TEXT", "OrderType TEXT"]
            creator_db_internal = module.mydatabase.Database()
            creator_db_internal.create_table_db(db_internal, columns_internal)

            db_BL3 = "db_BL3"
            columns_BL3 = ["Basic_Module TEXT", "Module TEXT", "Index_ TEXT", "Basic_Module_Group TEXT", "ScanCode TEXT", "Enable_Print TEXT", "Enable_PIC TEXT"]
            creator_db_BL3 = module.mydatabase.Database()
            creator_db_BL3.create_table_db(db_BL3, columns_BL3)

            db_BL4 = "db_BL4"
            columns_BL4 = ["BasicModuleNumber TEXT", "BasicModuleGroup TEXT", "ModuleIndex TEXT", "ModuleNumber TEXT"]
            creator_db_BL4 = module.mydatabase.Database()
            creator_db_BL4.create_table_db(db_BL4, columns_BL4)

            db_Wirelist = "db_Wirelist"
            columns_Wirelist = ["LtgNr TEXT", "Index_ TEXT", "Variante TEXT", "Variant TEXT"]
            creator_db_Wirelist = module.mydatabase.Database()
            creator_db_Wirelist.create_table_db(db_Wirelist, columns_Wirelist)

            db_pm_materials = "db_pm_materials"
            columns_pm_materials = ["WIRE TEXT", "PM TEXT"]
            creator_db_pm_materials = module.mydatabase.Database()
            creator_db_pm_materials.create_table_db(db_pm_materials, columns_pm_materials)

    def clicer_radioButton(self):    # Приховання і відображення кнопок для загрузки мастердат Virtual Internal Basic
        if self.radioButton.isChecked() == True:
            print("1")
            self.pushButton_2.hide()
            self.label_2.hide()
            self.pushButton_3.hide()
            self.label_3.hide()
            self.pushButton_3_1.show()
            self.label_3_1.show()
        elif self.radioButton_2.isChecked() == True:
            print("2")
            self.pushButton_2.hide()
            self.label_2.hide()
            self.pushButton_3.hide()
            self.label_3.hide()
            self.pushButton_3_1.show()
            self.label_3_1.show()
        elif self.radioButton_3.isChecked() == True:
            print("3")
            self.pushButton_2.show()
            self.label_2.show()
            self.pushButton_3.show()
            self.label_3.show()
            self.pushButton_3_1.hide()
            self.label_3_1.hide()

    def clicer_check_box(self): #загрузка даних з бази і очищення даних в програмі
        if self.check_box.isChecked() == True:
            # Обнуляю загружені вязки ------------------------------------------------------------------------
            self.Read_harnesses = []  # Всі вязки
            self.uniq_har = []  # перелік вязок
            self.label.setText("NOT")
            # Обнуляю всі змінні
            self.Rezult = []  # Результат розбивки вязок
            self.label_4.setText("NOT")
            self.Mistakes_harn = []  # Помилки які вичислив при загрузці Basic_Module і при розбивці вязок
            self.Rezult_of_check = []
            self.label_7.setText("NOT")

            # Підтягую дані з бази даних для Virt ------------------------------------------------------------
            self.Read_Virt = []  # Чистий Virtual
            self.only_index_virt = []  # Всі індекси з Virtual
            if self.radioButton_3.isChecked():
                db_V = module.mydatabase.Database()
                self.Read_Virt = db_V.unload_db("db_virtual")
                # Роблю масив тільки з індексів віртуала для перевірки чи є всі індекси в вязці
                for i in self.Read_Virt:
                    if i[1] not in self.only_index_virt:
                        self.only_index_virt.append(i[1])
                len_V = len(self.Read_Virt)
                self.label_2.setText("Unloaded from database - " + str(len_V) + " rows")

            # Підтягую дані з бази даних для Int --------------------------------------------------------------
            self.Read_Int = []  # Чистий Internal
            self.Readed_Int_and_number_of_virt = []  # Для функції Harnesses_to_Internal
            if self.radioButton_3.isChecked():
                db_I = module.mydatabase.Database()
                self.Read_Int = db_I.unload_db("db_internal")
                # Роблю список інтернал і кількість віртуалів(умов) під інтернал, щоб в кінці відсіяти умови які виконались але це умови які не виконались під більші конфігурації
                internal_withaut_harn = []
                internal_withaut_harn_mas = []
                for i in self.Read_Int:
                    if i[0] not in internal_withaut_harn:
                        internal_withaut_harn.append(i[0])
                for i in self.Read_Int:
                    internal_withaut_harn_mas.append(i[0])
                for i in internal_withaut_harn:
                    add_in_mass = []
                    add_in_mass.append(i)
                    add_in_mass.append(internal_withaut_harn_mas.count(i))
                    self.Readed_Int_and_number_of_virt.append(add_in_mass)
                # Перевіряю чи є в різних групах однакові назви інтерналів
                same_name_int = []
                for i in self.Read_Int:
                    prev_same_name_int = []
                    prev_same_name_int.append(i[0])
                    prev_same_name_int.append(i[1])
                    if prev_same_name_int not in same_name_int:
                        same_name_int.append(prev_same_name_int)
                same_name_int_2 = []
                for i in same_name_int:
                    same_name_int_2.append(i[0])
                for i in same_name_int_2:
                    if same_name_int_2.count(i) > 1:
                        self.Mistakes_harn.append(["The_same_name_Internal_module_in_different_group " + str(i)])
                len_I = len(self.Read_Int)
                self.label_3.setText("Unloaded from database - " + str(len_I) + " rows")

            # Підтягую дані з бази даних для Read_Basic_Module_L3 ----------------------------------------------
            self.Read_Basic_Module_L3 = []  # Чистий Basic_Module
            self.only_index_Basic_Module_L3 = []  # Всі індекси з Basic_Module
            self.For_Basic_Module_int_L3 = []  # Масив :Інтернал - кількість умов - група, для розбивки вязки
            if self.radioButton.isChecked():  # Перевірка з яким LEPS працюємо
                db_BML3 = module.mydatabase.Database()
                self.Read_Basic_Module_L3 = db_BML3.unload_db("db_BL3")
                # Роблю масив тільки з індексів Basic_Module для перевірки чи є всі індекси в вязці
                for i in self.Read_Basic_Module_L3:
                    if i[1] not in self.only_index_Basic_Module_L3:
                        self.only_index_Basic_Module_L3.append(i[1])
                # Обробка Basic_Module на виявлення помилок і подальшого використання
                uniq_group_BM = []  # масив з унікальними групами BM
                for i in self.Read_Basic_Module_L3:
                    if i[3] not in uniq_group_BM:
                        uniq_group_BM.append(i[3])
                for i in uniq_group_BM:
                    one_group_BM = []  # масив з окремою групою
                    for k in self.Read_Basic_Module_L3:
                        if i == k[3]:
                            one_group_BM.append(k)
                    uniq_module_in_one_group_BM = []  # масив з унікальними інтерналами під групу
                    for k in one_group_BM:
                        if k[0] not in uniq_module_in_one_group_BM:
                            uniq_module_in_one_group_BM.append(k[0])
                    for k in uniq_module_in_one_group_BM:
                        range_internal = []  # Масив з інтерналами
                        for j in one_group_BM:
                            if k == j[0]:
                                range_internal.append(j)
                        uniq_index_in_range_internal = []  # кількість унікальних умов під інтернал
                        for j in range_internal:
                            if j[2] not in uniq_index_in_range_internal:
                                uniq_index_in_range_internal.append(j[2])
                        prev_For_Basic_Module_int = []
                        prev_For_Basic_Module_int.append(k)
                        prev_For_Basic_Module_int.append(len(uniq_index_in_range_internal))
                        prev_For_Basic_Module_int.append(i)
                        self.For_Basic_Module_int_L3.append(prev_For_Basic_Module_int)
                        # Добавляю перевірку на однакові індекси в одному інтерналі
                        indexes_for_internal = []
                        for j in range_internal:
                            indexes_for_internal.append(j[1])
                        for j in indexes_for_internal:
                            if indexes_for_internal.count(j) > 1:
                                self.Mistakes_harn.append(
                                    ["The_same_index_in_one_Internal " + str(range_internal[0][0]) + "_" + str(j)])
                # Перевіряю чи однакові назви в стовпчиках Basic_Module i ScanCode
                counter_for_first = 0
                for i in self.Read_Basic_Module_L3:
                    if counter_for_first == 0:
                        counter_for_first += 1
                    else:
                        if i[0] != i[4]:
                            self.Mistakes_harn.append(["Different_names_in_Basic_Module_and_Scan_Code " + str(
                                i[0]) + "_" + str(i[3]) + "_" + str(i[4])])
                        counter_for_first += 1
                # Перевіряю чи є в різних групах однакові назви інтерналів
                same_name_int = []
                for i in self.Read_Basic_Module_L3:
                    prev_same_name_int = []
                    prev_same_name_int.append(i[0])
                    prev_same_name_int.append(i[3])
                    if prev_same_name_int not in same_name_int:
                        same_name_int.append(prev_same_name_int)
                same_name_int_2 = []
                for i in same_name_int:
                    same_name_int_2.append(i[0])
                for i in same_name_int_2:
                    if same_name_int_2.count(i) > 1:
                        self.Mistakes_harn.append(["The_same_name_Internal_module_in_different_group " + str(i)])
                len_BML3 = len(self.Read_Basic_Module_L3)
                self.label_3_1.setText("Unloaded from database - " + str(len_BML3) + " rows")

            # Підтягую дані з бази даних для Read_Basic_Module_L4 ------------------------------------------------
            self.Read_Basic_Module_L4 = []  # Чистий Basic_Module
            self.only_index_Basic_Module_L4 = []  # Всі індекси з Basic_Module
            self.For_Basic_Module_int_L4 = []  # Масив :Інтернал - кількість умов - група, для розбивки вязки
            if self.radioButton_2.isChecked():# Перевірка з яким LEPS працюємо
                db_BML4 = module.mydatabase.Database()
                self.Read_Basic_Module_L4 = db_BML4.unload_db("db_BL4")
                # Роблю масив тільки з індексів Basic_Module для перевірки чи є всі індекси в вязці
                for i in self.Read_Basic_Module_L4:
                    if i[3] not in self.only_index_Basic_Module_L4:
                        self.only_index_Basic_Module_L4.append(i[3])
                # Обробка Basic_Module на виявлення помилок і подальшого використання
                uniq_group_BM = []  # масив з унікальними групами BM
                for i in self.Read_Basic_Module_L4:
                    if i[1] not in uniq_group_BM:
                        uniq_group_BM.append(i[1])
                for i in uniq_group_BM:
                    one_group_BM = []  # масив з окремою групою
                    for k in self.Read_Basic_Module_L4:
                        if i == k[1]:
                            one_group_BM.append(k)
                    uniq_module_in_one_group_BM = []  # масив з унікальними інтерналами під групу
                    for k in one_group_BM:
                        if k[0] not in uniq_module_in_one_group_BM:
                            uniq_module_in_one_group_BM.append(k[0])
                    for k in uniq_module_in_one_group_BM:
                        range_internal = []  # Масив з інтерналами
                        for j in one_group_BM:
                            if k == j[0]:
                                range_internal.append(j)
                        uniq_index_in_range_internal = []  # кількість унікальних умов під інтернал
                        for j in range_internal:
                            if j[2] not in uniq_index_in_range_internal:
                                uniq_index_in_range_internal.append(j[2])
                        prev_For_Basic_Module_int = []
                        prev_For_Basic_Module_int.append(k)
                        prev_For_Basic_Module_int.append(len(uniq_index_in_range_internal))
                        prev_For_Basic_Module_int.append(i)
                        self.For_Basic_Module_int_L4.append(prev_For_Basic_Module_int)
                        # Добавляю перевірку на однакові індекси в одному інтерналі
                        indexes_for_internal = []
                        for j in range_internal:
                            indexes_for_internal.append(j[3])
                        for j in indexes_for_internal:
                            if indexes_for_internal.count(j) > 1:
                                self.Mistakes_harn.append(
                                    ["The_same_index_in_one_Internal " + str(range_internal[0][0]) + "_" + str(j)])
                # Перевіряю чи є в різних групах однакові назви інтерналів
                same_name_int = []
                for i in self.Read_Basic_Module_L4:
                    prev_same_name_int = []
                    prev_same_name_int.append(i[0])
                    prev_same_name_int.append(i[1])
                    if prev_same_name_int not in same_name_int:
                        same_name_int.append(prev_same_name_int)
                same_name_int_2 = []
                for i in same_name_int:
                    same_name_int_2.append(i[0])
                for i in same_name_int_2:
                    if same_name_int_2.count(i) > 1:
                        self.Mistakes_harn.append(["The_same_name_Internal_module_in_different_group " + str(i)])
                len_BML4 = len(self.Read_Basic_Module_L4)
                self.label_3_1.setText("Unloaded from database - " + str(len_BML4) + " rows")

            # Підтягую дані з бази даних для Wirelist ---------------------------------------------------------
            self.Wirelist = []
            db_W = module.mydatabase.Database()
            self.Wirelist = db_W.unload_db("db_Wirelist")
            len_W = len(self.Wirelist)
            self.label_5.setText("Unloaded from database - " + str(len_W) + " rows")

            # Підтягую дані з бази даних для wires_in_prod_mod ------------------------------------------------
            self.wires_in_prod_mod = []
            db_WinPM = module.mydatabase.Database()
            self.wires_in_prod_mod = db_WinPM.unload_db("db_pm_materials")
            len_WinPM = len(self.wires_in_prod_mod)
            self.label_6.setText("Unloaded from database - " + str(len_WinPM) + " rows")

        elif self.check_box.isChecked() == False:
            # print("Тут обнулити всі змінні і прогрес бари")
            self.Read_harnesses = []  # Всі вязки
            self.uniq_har = []  # перелік вязок
            self.Read_Int = []  # Чистий Internal
            self.Readed_Int_and_number_of_virt = []  # Для функції Harnesses_to_Internal
            self.Read_Virt = []  # Чистий Virtual
            self.only_index_virt = []  # Всі індекси з Virtual
            self.Read_Basic_Module_L3 = []  # Чистий Basic_Module
            self.only_index_Basic_Module_L3 = []  # Всі індекси з Basic_Module
            self.For_Basic_Module_int_L3 = []  # Масив :Інтернал - кількість умов - група, для розбивки вязки
            self.Read_Basic_Module_L4 = []  # Чистий Basic_Module
            self.only_index_Basic_Module_L4 = []  # Всі індекси з Basic_Module
            self.For_Basic_Module_int_L4 = []  # Масив :Інтернал - кількість умов - група, для розбивки вязки
            self.Rezult = []  # Результат розбивки вязок
            self.Mistakes_harn = []  # Помилки які вичислив при загрузці Basic_Module і при розбивці вязок
            self.Wirelist = []
            self.wires_in_prod_mod = []
            self.Rezult_of_check = []

            self.label.setText("NOT")
            self.label_2.setText("NOT")
            self.label_3.setText("NOT")
            self.label_3_1.setText("NOT")
            self.label_4.setText("NOT")
            self.label_5.setText("NOT")
            self.label_6.setText("NOT")
            self.label_7.setText("NOT")
            self.progressBar.setValue(0)
            self.progressBar_2.setValue(0)

    def clicer_combo_box(self, index):
        selected_item = self.combo_box.itemText(index)
        if selected_item == "Unload csv from ALL db":
            data_ALL = [] #масив для запису
            db_ALL = module.mydatabase.Database() #створюю обєкт бази даних

            data_ALL_V = db_ALL.unload_db("db_virtual")
            data_mas_ALL_V = [list(t) for t in data_ALL_V] # перетворюю масив з кортежів на масив з масивів
            data_ALL.extend(data_mas_ALL_V)

            data_ALL_I = db_ALL.unload_db("db_internal")
            data_mas_ALL_I = [list(t) for t in data_ALL_I]  # перетворюю масив з кортежів на масив з масивів
            data_ALL.extend(data_mas_ALL_I)

            data_ALL_BL3 = db_ALL.unload_db("db_BL3")
            data_mas_ALL_BL3 = [list(t) for t in data_ALL_BL3]  # перетворюю масив з кортежів на масив з масивів
            data_ALL.extend(data_mas_ALL_BL3)

            data_ALL_BL4 = db_ALL.unload_db("db_BL4")
            data_mas_ALL_BL4 = [list(t) for t in data_ALL_BL4]  # перетворюю масив з кортежів на масив з масивів
            data_ALL.extend(data_mas_ALL_BL4)

            data_ALL_W = db_ALL.unload_db("db_Wirelist")
            data_mas_ALL_W = [list(t) for t in data_ALL_W]  # перетворюю масив з кортежів на масив з масивів
            data_ALL.extend(data_mas_ALL_W)

            data_ALL_PM = db_ALL.unload_db("db_pm_materials")
            data_mas_ALL_PM = [list(t) for t in data_ALL_PM]  # перетворюю масив з кортежів на масив з масивів
            data_ALL.extend(data_mas_ALL_PM)

            if data_ALL == []:
                self.MessageBox_Warning("ALL db is empty")
            way_data_ALL = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
            if way_data_ALL == ('', ''):  # Перевірка чи створено файл у який зберегти
                self.MessageBox_Warning("You dont select file")
            elif way_data_ALL:
                module.read_record_csv.record(data_ALL, way_data_ALL[0])

        elif selected_item == "Unload csv from Virtual db":
            db_V = module.mydatabase.Database()
            data_V = db_V.unload_db("db_virtual")
            data_mas_V = [list(t) for t in data_V] # перетворюю масив з кортежів на масив з масивів

            if data_V == []:
                self.MessageBox_Warning("Virtual db is empty")
            way_data_V = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
            if way_data_V == ('', ''):  # Перевірка чи створено файл у який зберегти
                self.MessageBox_Warning("You dont select file")
            elif way_data_V:
                module.read_record_csv.record(data_mas_V, way_data_V[0])

        elif selected_item == "Unload csv from Internal db":
            db_I = module.mydatabase.Database()
            data_I = db_I.unload_db("db_internal")
            data_mas_I = [list(t) for t in data_I]  # перетворюю масив з кортежів на масив з масивів

            if data_I == []:
                self.MessageBox_Warning("Internal db is empty")
            way_data_I = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
            if way_data_I == ('', ''):  # Перевірка чи створено файл у який зберегти
                self.MessageBox_Warning("You dont select file")
            elif way_data_I:
                module.read_record_csv.record(data_mas_I, way_data_I[0])

        elif selected_item == "Unload csv from Basic_Module_L3 db":
            db_BML3 = module.mydatabase.Database()
            data_BML3 = db_BML3.unload_db("db_BL3")
            data_mas_BML3 = [list(t) for t in data_BML3]  # перетворюю масив з кортежів на масив з масивів

            if data_BML3 == []:
                self.MessageBox_Warning("Basic_Module_L3 db is empty")
            way_data_BML3 = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
            if way_data_BML3 == ('', ''):  # Перевірка чи створено файл у який зберегти
                self.MessageBox_Warning("You dont select file")
            elif way_data_BML3:
                module.read_record_csv.record(data_mas_BML3, way_data_BML3[0])

        elif selected_item == "Unload csv from Basic_Module_L4 db":
            db_BML4 = module.mydatabase.Database()
            data_BML4 = db_BML4.unload_db("db_BL4")
            data_mas_BML4 = [list(t) for t in data_BML4]  # перетворюю масив з кортежів на масив з масивів

            if data_BML4 == []:
                self.MessageBox_Warning("Basic_Module_L4 db is empty")
            way_data_BML4 = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
            if way_data_BML4 == ('', ''):  # Перевірка чи створено файл у який зберегти
                self.MessageBox_Warning("You dont select file")
            elif way_data_BML4:
                module.read_record_csv.record(data_mas_BML4, way_data_BML4[0])

        elif selected_item == "Unload csv from Wirelist db":
            db_W = module.mydatabase.Database()
            data_W = db_W.unload_db("db_Wirelist")
            data_mas_W = [list(t) for t in data_W]  # перетворюю масив з кортежів на масив з масивів

            if data_W == []:
                self.MessageBox_Warning("Wirelist db is empty")
            way_data_W = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
            if way_data_W == ('', ''):  # Перевірка чи створено файл у який зберегти
                self.MessageBox_Warning("You dont select file")
            elif way_data_W:
                module.read_record_csv.record(data_mas_W, way_data_W[0])

        elif selected_item == "Unload csv from wires in prod_mod db":
            db_WinPM = module.mydatabase.Database()
            data_WinPM = db_WinPM.unload_db("db_pm_materials")
            data_mas_WinPM = [list(t) for t in data_WinPM]  # перетворюю масив з кортежів на масив з масивів

            if data_WinPM == []:
                self.MessageBox_Warning("wires in prod_mod db is empty")
            way_data_WinPM = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
            if way_data_WinPM == ('', ''):  # Перевірка чи створено файл у який зберегти
                self.MessageBox_Warning("You dont select file")
            elif way_data_WinPM:
                module.read_record_csv.record(data_mas_WinPM, way_data_WinPM[0])

    def clicer_combo_box_2(self, index_2): # кнопки для очищення бази даних
        selected_item = self.combo_box_2.itemText(index_2)
        if selected_item == "Clear ALL db":
            db_ALL = module.mydatabase.Database()
            db_ALL.clear_db("db_virtual")
            db_ALL.clear_db("db_internal")
            db_ALL.clear_db("db_BL3")
            db_ALL.clear_db("db_BL4")
            db_ALL.clear_db("db_Wirelist")
            db_ALL.clear_db("db_pm_materials")
            self.MessageBox_Warning("ALL database is cleared")
            if self.check_box.isChecked() == True:
                # self.label.setText("NOT")
                self.label_2.setText("NOT")
                self.label_3.setText("NOT")
                self.label_3_1.setText("NOT")
                # self.label_4.setText("NOT")
                self.label_5.setText("NOT")
                self.label_6.setText("NOT")
                # self.label_7.setText("NOT")
        elif selected_item == "Clear Virtual db":
            db_V = module.mydatabase.Database()
            db_V.clear_db("db_virtual")
            self.MessageBox_Warning("Virtual database is cleared")
            self.label_2.setText("NOT")
        elif selected_item == "Clear Internal db":
            db_I = module.mydatabase.Database()
            db_I.clear_db("db_internal")
            self.MessageBox_Warning("Internal database is cleared")
            self.label_3.setText("NOT")
        elif selected_item == "Clear Basic_Module_L3 db":
            db_BL3 = module.mydatabase.Database()
            db_BL3.clear_db("db_BL3")
            self.MessageBox_Warning("Basic_Module_L3 database is cleared")
            if self.radioButton.isChecked():
                self.label_3_1.setText("NOT")
        elif selected_item == "Clear Basic_Module_L4 db":
            db_BL4 = module.mydatabase.Database()
            db_BL4.clear_db("db_BL4")
            self.MessageBox_Warning("Basic_Module_L4 database is cleared")
            if self.radioButton_2.isChecked():
                self.label_3_1.setText("NOT")
        elif selected_item == "Clear Wirelist db":
            db_W = module.mydatabase.Database()
            db_W.clear_db("db_Wirelist")
            self.MessageBox_Warning("Wirelist database is cleared")
            self.label_5.setText("NOT")
        elif selected_item == "Clear wires in prod_mod db":
            db_WinPM = module.mydatabase.Database()
            db_WinPM.clear_db("db_pm_materials")
            self.MessageBox_Warning("wires in prod_mod database is cleared")
            self.label_6.setText("NOT")

    def clicer_pushButton(self):
        if self.radioButton.isChecked() or self.radioButton_2.isChecked() or self.radioButton_3.isChecked(): # Перевірка чи вибраний LEPS
            Open_Read_harnesses = QFileDialog.getExistingDirectory()
            if Open_Read_harnesses:
                self.Read_harnesses = module.Choose_file.choose_harnesses_in_folder(Open_Read_harnesses)[0]
                # визначення списку унікальних вязок
                for i in self.Read_harnesses:
                    if i[0] not in self.uniq_har:
                        self.uniq_har.append(i[0])
                name_open_folder = Open_Read_harnesses.split("/")
                self.label.setText(name_open_folder[len(name_open_folder) - 1])

                #Перевірка чи всі файли формату scv (включно з іншими папками, просто ігнорить всі крім csv)
                if module.Choose_file.choose_harnesses_in_folder(Open_Read_harnesses)[1] == '0':
                    self.MessageBox_Warning("Some file from folder not in csv format")
                # Перевірка чи папка не пуста
                if self.Read_harnesses == []:
                    self.MessageBox_Warning("Folder is empty or file is empty")
        else:
            self.MessageBox_Warning("Select LEPS and type of masterdata !")

    def clicer_pushButton_2(self): #Клавіша для загрузки Virtual Leps_4_VI
        if self.radioButton.isChecked() == False and self.radioButton_2.isChecked() == False and self.radioButton_3.isChecked() == False: # Перевірка чи вибраний LEPS
            self.MessageBox_Warning("Select LEPS and type of masterdata !")
        elif self.radioButton_3.isChecked():
            Open_Read_Virtual = QFileDialog.getOpenFileName()
            if Open_Read_Virtual == ('', ''): # Перевірка чи вибрано файл
                self.MessageBox_Warning("You dont select file")
            elif Open_Read_Virtual:
                # Перевірка на роботу з базою даних чи без
                if self.check_box.isChecked() == False:
                    self.Read_Virt = module.Choose_file.choose_f(Open_Read_Virtual[0])[0]
                elif self.check_box.isChecked() == True:
                    self.Read_Virt = []
                    self.Read_Virt = module.Choose_file.choose_f(Open_Read_Virtual[0])[0]
                    db_V_Thread = module.Thread_to_record_db.Threading(self.Read_Virt, "db_virtual")
                    db_V_Thread.processing_progress.connect(self.update_progress_3)
                    db_V_Thread.processing_finished.connect(self.data_processing_finished_3)
                    db_V_Thread.start()

                #Роблю масив тільки з індексів віртуала для перевірки чи є всі індекси в вязці
                for i in self.Read_Virt:
                    if i[1] not in self.only_index_virt:
                        self.only_index_virt.append(i[1])

                name_open_file = Open_Read_Virtual[0].split("/")
                self.label_2.setText(name_open_file[len(name_open_file) - 1])

                #Перевірка чи всі файли формату scv (включно з іншими папками, просто ігнорить всі крім csv)
                if module.Choose_file.choose_f(Open_Read_Virtual[0])[1] == '0':
                    self.MessageBox_Warning("File not in csv format")
        else:
            self.MessageBox_Warning("You select WRONG LEPS !")

    def clicer_pushButton_3(self): #Клавіша для загрузки Internal Leps_4_VI
        if self.radioButton.isChecked() == False and self.radioButton_2.isChecked() == False and self.radioButton_3.isChecked() == False: # Перевірка чи вибраний LEPS
            self.MessageBox_Warning("Select LEPS and type of masterdata !")
        elif self.radioButton_3.isChecked():
            Open_Read_Int = QFileDialog.getOpenFileName()
            if Open_Read_Int == ('', ''): # Перевірка чи вибрано файл
                self.MessageBox_Warning("You dont select file")
            elif Open_Read_Int:
                # Перевірка на роботу з базою даних чи без
                if self.check_box.isChecked() == False:
                    self.Read_Int = module.Choose_file.choose_f(Open_Read_Int[0])[0]
                elif self.check_box.isChecked() == True:
                    self.Read_Int = []
                    self.Read_Int = module.Choose_file.choose_f(Open_Read_Int[0])[0]
                    db_I_Thread = module.Thread_to_record_db.Threading(self.Read_Int, "db_internal")
                    db_I_Thread.processing_progress.connect(self.update_progress_3)
                    db_I_Thread.processing_finished.connect(self.data_processing_finished_3)
                    db_I_Thread.start()

                # Роблю список інтернал і кількість віртуалів(умов) під інтернал, щоб в кінці відсіяти умови які виконались але це умови які не виконались під більші конфігурації
                internal_withaut_harn = []
                internal_withaut_harn_mas = []
                for i in self.Read_Int:
                    if i[0] not in internal_withaut_harn:
                        internal_withaut_harn.append(i[0])
                for i in self.Read_Int:
                    internal_withaut_harn_mas.append(i[0])
                for i in internal_withaut_harn:
                    add_in_mass = []
                    add_in_mass.append(i)
                    add_in_mass.append(internal_withaut_harn_mas.count(i))
                    self.Readed_Int_and_number_of_virt.append(add_in_mass)

                #Перевіряю чи є в різних групах однакові назви інтерналів
                same_name_int = []
                for i in self.Read_Int:
                    prev_same_name_int = []
                    prev_same_name_int.append(i[0])
                    prev_same_name_int.append(i[1])
                    if prev_same_name_int not in same_name_int:
                        same_name_int.append(prev_same_name_int)
                same_name_int_2 = []
                for i in same_name_int:
                    same_name_int_2.append(i[0])
                for i in same_name_int_2:
                    if same_name_int_2.count(i) > 1:
                        self.Mistakes_harn.append(["The_same_name_Internal_module_in_different_group " + str(i)])

                name_open_file = Open_Read_Int[0].split("/")
                self.label_3.setText(name_open_file[len(name_open_file) - 1])

                # Перевірка чи всі файли формату scv (включно з іншими папками, просто ігнорить всі крім csv)
                if module.Choose_file.choose_f(Open_Read_Int[0])[1] == '0':
                    self.MessageBox_Warning("File not in csv format")
        else:
            self.MessageBox_Warning("You select WRONG LEPS !")

    def clicer_pushButton_3_1(self): #Клавіша для загрузки Basic_Module Leps_3_Basic Leps_4_Basic
        if self.radioButton.isChecked() == False and self.radioButton_2.isChecked() == False and self.radioButton_3.isChecked() == False: # Перевірка чи вибраний LEPS
            self.MessageBox_Warning("Select LEPS and type of masterdata !")
        elif self.radioButton.isChecked():
            # Кнопка для загрузки Basic_Module під Leps_3_Basic
            Open_Read_Basic_Module = QFileDialog.getOpenFileName()
            if Open_Read_Basic_Module == ('', ''): # Перевірка чи вибрано файл
                self.MessageBox_Warning("You dont select file")
            elif Open_Read_Basic_Module:
                # Перевірка на роботу з базою даних чи без
                if self.check_box.isChecked() == False:
                    self.Read_Basic_Module_L3 = module.Choose_file.choose_f(Open_Read_Basic_Module[0])[0]
                elif self.check_box.isChecked() == True:
                    self.Read_Basic_Module_L3 = []
                    self.Read_Basic_Module_L3 = module.Choose_file.choose_f(Open_Read_Basic_Module[0])[0]
                    db_BL3_Thread = module.Thread_to_record_db.Threading(self.Read_Basic_Module_L3, "db_BL3")
                    db_BL3_Thread.processing_progress.connect(self.update_progress_3)
                    db_BL3_Thread.processing_finished.connect(self.data_processing_finished_3)
                    db_BL3_Thread.start()

                # Роблю масив тільки з індексів Basic_Module для перевірки чи є всі індекси в вязці
                for i in self.Read_Basic_Module_L3:
                    if i[1] not in self.only_index_Basic_Module_L3:
                        self.only_index_Basic_Module_L3.append(i[1])

                # Обробка Basic_Module на виявлення помилок і подальшого використання
                uniq_group_BM = []  # масив з унікальними групами BM
                for i in self.Read_Basic_Module_L3:
                    if i[3] not in uniq_group_BM:
                        uniq_group_BM.append(i[3])
                for i in uniq_group_BM:
                    one_group_BM = []  # масив з окремою групою
                    for k in self.Read_Basic_Module_L3:
                        if i == k[3]:
                            one_group_BM.append(k)
                    uniq_module_in_one_group_BM = []  # масив з унікальними інтерналами під групу
                    for k in one_group_BM:
                        if k[0] not in uniq_module_in_one_group_BM:
                            uniq_module_in_one_group_BM.append(k[0])
                    for k in uniq_module_in_one_group_BM:
                        range_internal = []  # Масив з інтерналами
                        for j in one_group_BM:
                            if k == j[0]:
                                range_internal.append(j)
                        uniq_index_in_range_internal = []  # кількість унікальних умов під інтернал
                        for j in range_internal:
                            if j[2] not in uniq_index_in_range_internal:
                                uniq_index_in_range_internal.append(j[2])
                        prev_For_Basic_Module_int = []
                        prev_For_Basic_Module_int.append(k)
                        prev_For_Basic_Module_int.append(len(uniq_index_in_range_internal))
                        prev_For_Basic_Module_int.append(i)
                        self.For_Basic_Module_int_L3.append(prev_For_Basic_Module_int)

                        # Добавляю перевірку на однакові індекси в одному інтерналі
                        indexes_for_internal = []
                        for j in range_internal:
                            indexes_for_internal.append(j[1])
                        for j in indexes_for_internal:
                            if indexes_for_internal.count(j) > 1:
                                self.Mistakes_harn.append(
                                    ["The_same_index_in_one_Internal " + str(range_internal[0][0]) + "_" + str(j)])

                # Перевіряю чи однакові назви в стовпчиках Basic_Module i ScanCode
                counter_for_first = 0
                for i in self.Read_Basic_Module_L3:
                    if counter_for_first == 0:
                        counter_for_first += 1
                    else:
                        if i[0] != i[4]:
                            self.Mistakes_harn.append(["Different_names_in_Basic_Module_and_Scan_Code " + str(i[0]) + "_" + str(i[3]) + "_" + str(i[4])])
                        counter_for_first += 1

                # Перевіряю чи є в різних групах однакові назви інтерналів
                same_name_int = []
                for i in self.Read_Basic_Module_L3:
                    prev_same_name_int = []
                    prev_same_name_int.append(i[0])
                    prev_same_name_int.append(i[3])
                    if prev_same_name_int not in same_name_int:
                        same_name_int.append(prev_same_name_int)
                same_name_int_2 = []
                for i in same_name_int:
                    same_name_int_2.append(i[0])
                for i in same_name_int_2:
                    if same_name_int_2.count(i) > 1:
                        self.Mistakes_harn.append(["The_same_name_Internal_module_in_different_group " + str(i)])

                name_open_file = Open_Read_Basic_Module[0].split("/")
                self.label_3_1.setText(name_open_file[len(name_open_file) - 1])

                # Перевірка чи всі файли формату scv (включно з іншими папками, просто ігнорить всі крім csv)
                if module.Choose_file.choose_f(Open_Read_Basic_Module[0])[1] == '0':
                    self.MessageBox_Warning("File not in csv format")

        elif self.radioButton_2.isChecked():
            # Кнопка для загрузки Basic_Module під Leps_4_Basic
            Open_Read_Basic_Module = QFileDialog.getOpenFileName()
            if Open_Read_Basic_Module == ('', ''): # Перевірка чи вибрано файл
                self.MessageBox_Warning("You dont select file")
            elif Open_Read_Basic_Module:
                # Перевірка на роботу з базою даних чи без
                if self.check_box.isChecked() == False:
                    self.Read_Basic_Module_L4 = module.Choose_file.choose_f(Open_Read_Basic_Module[0])[0]
                elif self.check_box.isChecked() == True:
                    self.Read_Basic_Module_L4 = []
                    self.Read_Basic_Module_L4 = module.Choose_file.choose_f(Open_Read_Basic_Module[0])[0]
                    db_BL4_Thread = module.Thread_to_record_db.Threading(self.Read_Basic_Module_L4, "db_BL4")
                    db_BL4_Thread.processing_progress.connect(self.update_progress_3)
                    db_BL4_Thread.processing_finished.connect(self.data_processing_finished_3)
                    db_BL4_Thread.start()

                # Роблю масив тільки з індексів Basic_Module для перевірки чи є всі індекси в вязці
                for i in self.Read_Basic_Module_L4:
                    if i[3] not in self.only_index_Basic_Module_L4:
                        self.only_index_Basic_Module_L4.append(i[3])

                # Обробка Basic_Module на виявлення помилок і подальшого використання
                uniq_group_BM = []  # масив з унікальними групами BM
                for i in self.Read_Basic_Module_L4:
                    if i[1] not in uniq_group_BM:
                        uniq_group_BM.append(i[1])
                for i in uniq_group_BM:
                    one_group_BM = []  # масив з окремою групою
                    for k in self.Read_Basic_Module_L4:
                        if i == k[1]:
                            one_group_BM.append(k)
                    uniq_module_in_one_group_BM = []  # масив з унікальними інтерналами під групу
                    for k in one_group_BM:
                        if k[0] not in uniq_module_in_one_group_BM:
                            uniq_module_in_one_group_BM.append(k[0])
                    for k in uniq_module_in_one_group_BM:
                        range_internal = []  # Масив з інтерналами
                        for j in one_group_BM:
                            if k == j[0]:
                                range_internal.append(j)
                        uniq_index_in_range_internal = []  # кількість унікальних умов під інтернал
                        for j in range_internal:
                            if j[2] not in uniq_index_in_range_internal:
                                uniq_index_in_range_internal.append(j[2])
                        prev_For_Basic_Module_int = []
                        prev_For_Basic_Module_int.append(k)
                        prev_For_Basic_Module_int.append(len(uniq_index_in_range_internal))
                        prev_For_Basic_Module_int.append(i)
                        self.For_Basic_Module_int_L4.append(prev_For_Basic_Module_int)

                        # Добавляю перевірку на однакові індекси в одному інтерналі
                        indexes_for_internal = []
                        for j in range_internal:
                            indexes_for_internal.append(j[3])
                        for j in indexes_for_internal:
                            if indexes_for_internal.count(j) > 1:
                                self.Mistakes_harn.append(
                                    ["The_same_index_in_one_Internal " + str(range_internal[0][0]) + "_" + str(j)])

                # Перевіряю чи є в різних групах однакові назви інтерналів
                same_name_int = []
                for i in self.Read_Basic_Module_L4:
                    prev_same_name_int = []
                    prev_same_name_int.append(i[0])
                    prev_same_name_int.append(i[1])
                    if prev_same_name_int not in same_name_int:
                        same_name_int.append(prev_same_name_int)
                same_name_int_2 = []
                for i in same_name_int:
                    same_name_int_2.append(i[0])
                for i in same_name_int_2:
                    if same_name_int_2.count(i) > 1:
                        self.Mistakes_harn.append(["The_same_name_Internal_module_in_different_group " + str(i)])

                name_open_file = Open_Read_Basic_Module[0].split("/")
                self.label_3_1.setText(name_open_file[len(name_open_file) - 1])

                # Перевірка чи всі файли формату scv (включно з іншими папками, просто ігнорить всі крім csv)
                if module.Choose_file.choose_f(Open_Read_Basic_Module[0])[1] == '0':
                    self.MessageBox_Warning("File not in csv format")
        else:
            self.MessageBox_Warning("You select WRONG LEPS !")

    def clicer_pushButton_4(self):
        if self.radioButton.isChecked() == False and self.radioButton_2.isChecked() == False and self.radioButton_3.isChecked() == False:
            self.MessageBox_Warning("Select LEPS and type of masterdata !")
        elif self.radioButton.isChecked() or self.radioButton_2.isChecked() or self.radioButton_3.isChecked():
            # Перевірка чи масиви з вязками не пустий
            if self.Read_harnesses == []:
                self.MessageBox_Warning("Information about harnesses is empty")
            # Перевірка чи не пустий бейсік модуль та віртуал і інтернал
            if self.radioButton.isChecked():
                if self.Read_Basic_Module_L3 == []:
                    self.MessageBox_Warning("Information about Basic_Module_L3 is empty")
            elif self.radioButton_2.isChecked():
                if self.Read_Basic_Module_L4 == []:
                    self.MessageBox_Warning("Information about Basic_Module_L4 is empty")
            elif self.radioButton_3.isChecked():
                if self.Read_Virt == []:
                    self.MessageBox_Warning("Information about Virtual is empty")
                if self.Read_Int == []:
                    self.MessageBox_Warning("Information about Internal is empty")

            # Переношу обробку даних в окремий потік, щоб не глючив інтерфейс
            self.THREAD = module.Thread_to_Int.Threading(self.uniq_har, self.Read_harnesses, self.Read_Basic_Module_L3,
                                                         self.only_index_Basic_Module_L3, self.For_Basic_Module_int_L3,self.Read_Basic_Module_L4,
                                                         self.only_index_Basic_Module_L4, self.For_Basic_Module_int_L4,
                                                         self.Read_Virt, self.Read_Int,
                                                         self.Readed_Int_and_number_of_virt, self.only_index_virt,
                                                         self.radioButton, self.radioButton_2, self.radioButton_3)
            self.THREAD.processing_progress.connect(self.update_progress)
            self.THREAD.processing_finished.connect(self.data_processing_finished)
            self.THREAD.start()

    def update_progress(self, progress): # Для першого прогрес бару
        self.progressBar.setValue(progress)

    def data_processing_finished(self): # Для першого прогрес бару та зміни головних змінних
        self.Rezult = self.THREAD.Rezult
        self.Mistakes_harn = self.THREAD.Mistakes_harn
        self.label_4.setText("GENERATED")

    def clicer_pushButton_5(self):
        if self.Rezult == []:
            self.MessageBox_Warning("Internals is empty, generate them")
        save_Rezult = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
        if save_Rezult == ('', ''): # Перевірка чи створено файл у який зберегти
            self.MessageBox_Warning("You dont select file")
        elif save_Rezult:
            module.read_record_csv.record(self.Rezult, save_Rezult[0])

    def clicer_pushButton_6(self):
        if self.Mistakes_harn == []:
            self.MessageBox_Warning("Mistakes is empty")
        save_Rezult = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
        if save_Rezult == ('', ''): # Перевірка чи створено файл у який зберегти
            self.MessageBox_Warning("You dont select file")
        elif save_Rezult:
            module.read_record_csv.record(self.Mistakes_harn, save_Rezult[0])

    def clicer_pushButton_7(self):
        Open_Wirelist = QFileDialog.getOpenFileName()
        if Open_Wirelist == ('', ''): # Перевірка чи вибрано файл
            self.MessageBox_Warning("You dont select file")
        elif Open_Wirelist:
            # Перевірка на роботу з базою даних чи без
            if self.check_box.isChecked() == False:
                self.Wirelist = module.Choose_file.choose_f(Open_Wirelist[0])[0]
            elif self.check_box.isChecked() == True:
                self.Wirelist = []
                self.Wirelist = module.Choose_file.choose_f(Open_Wirelist[0])[0]
                db_W_Thread = module.Thread_to_record_db.Threading(self.Wirelist, "db_Wirelist")
                db_W_Thread.processing_progress.connect(self.update_progress_3)
                db_W_Thread.processing_finished.connect(self.data_processing_finished_3)
                db_W_Thread.start()

            name_open_file = Open_Wirelist[0].split("/")
            self.label_5.setText(name_open_file[len(name_open_file) - 1])

            # Перевірка чи всі файли формату scv (включно з іншими папками, просто ігнорить всі крім csv)
            if module.Choose_file.choose_f(Open_Wirelist[0])[1] == '0':
                self.MessageBox_Warning("File not in csv format")

    def clicer_pushButton_8(self):
        Open_wires_in_prod_mod = QFileDialog.getOpenFileName()
        if Open_wires_in_prod_mod == ('', ''): # Перевірка чи вибрано файл
            self.MessageBox_Warning("You dont select file")
        elif Open_wires_in_prod_mod:
            # Перевірка на роботу з базою даних чи без
            if self.check_box.isChecked() == False:
                self.wires_in_prod_mod = module.Choose_file.choose_f(Open_wires_in_prod_mod[0])[0]
            elif self.check_box.isChecked() == True:
                self.wires_in_prod_mod = []
                self.wires_in_prod_mod = module.Choose_file.choose_f(Open_wires_in_prod_mod[0])[0]
                db_WinPM_Thread = module.Thread_to_record_db.Threading(self.wires_in_prod_mod, "db_pm_materials")
                db_WinPM_Thread.processing_progress.connect(self.update_progress_3)
                db_WinPM_Thread.processing_finished.connect(self.data_processing_finished_3)
                db_WinPM_Thread.start()

            name_open_file = Open_wires_in_prod_mod[0].split("/")
            self.label_6.setText(name_open_file[len(name_open_file) - 1])

            # Перевірка чи всі файли формату scv (включно з іншими папками, просто ігнорить всі крім csv)
            if module.Choose_file.choose_f(Open_wires_in_prod_mod[0])[1] == '0':
                self.MessageBox_Warning("File not in csv format")

    def clicer_pushButton_9(self):
        # Перевірка чи є інформація для генерації
        if self.Read_harnesses == []:
            self.MessageBox_Warning("Information about harnesses is empty")
        if self.wires_in_prod_mod == []:
            self.MessageBox_Warning("Information about wires_in_prod_mod is empty")
        if self.Wirelist == []:
            self.MessageBox_Warning("Information about Wirelist is empty")
        if self.Rezult == []:
            self.MessageBox_Warning("First you need to generate Internal for harnesses")

        # Переношу обробку даних в окремий потік, щоб не глючив інтерфейс
        self.THREAD_Check = module.Thread_to_Check_modular.Threading(self.uniq_har, self.Read_harnesses, self.Rezult, self.wires_in_prod_mod, self.Wirelist)
        self.THREAD_Check.processing_progress.connect(self.update_progress_2)
        self.THREAD_Check.processing_finished.connect(self.data_processing_finished_2)
        self.THREAD_Check.start()

    def update_progress_2(self, progress): # Для другого прогрес бару
        self.progressBar_2.setValue(progress)

    def data_processing_finished_2(self): # Для другого прогрес бару та зміни головних змінних
        self.Rezult_of_check = self.THREAD_Check.Rezult_of_check
        self.label_7.setText("GENERATED")

    def update_progress_3(self, progress): # Для третього прогрес бару
        self.progressBar_3.setValue(progress)

    def data_processing_finished_3(self): # Для третього прогрес бару та зміни головних змінних
        pass

    def clicer_pushButton_10(self):
        if self.Rezult_of_check == []:
            self.MessageBox_Warning("Result of check is empty")
        save_Rezult_of_check = QFileDialog.getSaveFileName(filter='Data File (*.csv)')
        if save_Rezult_of_check == ('', ''): # Перевірка чи створено файл у який зберегти
            self.MessageBox_Warning("You dont select file")
        elif save_Rezult_of_check:
            module.read_record_csv.record(self.Rezult_of_check, save_Rezult_of_check[0])

    def MessageBox_Warning(self, content_text):
        msg_box_chose_leps = QMessageBox()
        msg_box_chose_leps.setIcon(QMessageBox.Warning)
        msg_box_chose_leps.setWindowTitle("WARNING")
        msg_box_chose_leps.setText(content_text)

        retval = msg_box_chose_leps.exec_()

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
